<h1 id='agent-api'>Agent API</h1><h2 id='signup-and-setting-campaign'>Signup and setting campaign</h2>
<ul>
<li>  You should see <a href="https://docs.google.com/document/d/1mfgtknMbnzDL6sKBKDOtWC0cnHwX59NT5nqWISqQZCE/edit#heading=h.ubhpu5uvlrg1">Alli onboarding document</a>.</li>
</ul>
<h2 id='tools-amp-library'>Tools &amp; Library</h2>
<p>GraphQL is implemented over standard HTTP and websocket. So you can choose any http, websocket library like python requests.</p>

<ul>
<li>A graphical interative in-brower GraphQL IDE : <a href="https://github.com/graphql/graphiql">https://github.com/graphql/graphiql<br>
</a></li>
<li>  Python Library : <a href="https://github.com/graphql-python/gql">https://github.com/graphql-python/gql</a></li>
<li>  Java Library : <a href="https://github.com/apollographql/apollo-android">https://github.com/apollographql/apollo-android</a></li>
<li>  Node Library : <a href="https://github.com/apollographql/apollo-client">https://github.com/apollographql/apollo-client</a></li>
<li>  Python websocket library : <a href="https://pypi.org/project/websocket-client/">https://pypi.org/project/websocket-client/</a></li>
</ul>
<h2 id='endpoints'>Endpoints</h2>
<ul>
<li>GRAPHQL_ENDPOINT: <a href="https://backend.alli.ai/d/graphql/">https://backend.alli.ai/d/graphql/</a></li>
</ul>
<h2 id='conversation-list-api-tutorial-with-graphiql'>Conversation list API Tutorial with GraphiQL</h2><h3 id='prerequisite'>Prerequisite</h3>
<ol>
<li><p>Download :
Please download Graphiql from <a href="https://github.com/graphql/graphiql">here</a></p></li>
<li><p>Set the Endpoint to <a href="https://backend.alli.ai/d/graphql/">https://backend.alli.ai/d/graphql/</a></p></li>
</ol>

<p><img src="/images/end_point.png" alt="End point" /></p>

<ol>
<li>You need get a token to access to the conversation list. You can get the token through the login mutation.
<code>
mutation m {
login(email: &quot;YOUR_EMAIL&quot;, password: &quot;YOUR_PASSWORD&quot;) {
token
}
}
</code></li>
<li>Please put the token in HTTP header after clicking &quot;Edit HTTP Headers&quot; button. Header name is AUTHORIZATION and put the token in header value.</li>
</ol>

<p><img src="/images/http_header.png" alt="Http header" /></p>
<h3 id='getting-the-conversations-list'>Getting the conversations list</h3>
<ol>
<li>Retrieve conversations list by the following query.</li>
</ol>

<p><img src="/images/conversations.png" alt="Conversations" /></p>
<pre class="highlight plaintext"><code>query getConversations {
  conversations(filter: {}, first: 5) {
    edges {
      node {
        id
        campaign {
          id
        }
        user {
          ownUserId
        }
        chats {
          edges {
            node {
              ... on UserChat {
                message
              }
              ... on AgentChat {
                message
                agent {
                  name
                }
              }
              ... on BotChat {
                message
                createdAt
                chatOptions
              }
              __typename
            }
          }
        }
      }
    }
  }
}
</code></pre>
<ol>
<li>If you want to get more fields you can simply add field name in the query.
Re: all the available field names and types, you can check it in the schema section.</li>
</ol>

<p><img src="/images/campaign_types.png" alt="Campaign types" /></p>

<p>For example, if you want to get more fields, such as name and description of the campaign in each conversation, you can simply put them in the query.</p>
<pre class="highlight plaintext"><code>query getConversations {
  conversations(filter: {}, first: 5) {
    edges {
      node {
        id
        campaign {
          id
          name
          description
        }
        user {
          ownUserId
        }
        chats {
          edges {
            node {
              ... on UserChat {
                message
              }
              ... on AgentChat {
                message
                agent {
                  name
                }
              }
              ... on BotChat {
                message
                createdAt
                chatOptions
              }
              __typename
            }
          }
        }
      }
    }
  }
}
</code></pre>
<ol>
<li>Retrieving conversations query takes the following parameters.
To see the detailed type specification of each parameters, please take a look at the schema documentation in GraphiQL.</li>
</ol>

<p><img src="/images/documentation.png" alt="Documentation" /></p>

<ul>
<li>filter

<ul>
<li>filter takes the following 6 parameters

<ul>
<li>campaignIds: list of campaign ids</li>
<li>userIds: list of user ids</li>
<li>state: one of the following ENUMs

<ul>
<li>INIT</li>
<li>END_OF_CHATBOT</li>
<li>END_BY_AGENT</li>
<li>END_BY_USER</li>
<li>WAIT_AGENT</li>
<li>WAIT_USER_ANSWER</li>
<li>WAIT_USER_ANSWER_2</li>
<li>INTERRUPTED</li>
</ul></li>
<li>startAt_Gte: greater than the start date</li>
<li>endAt_Gte: lower than the end date</li>
<li>searchTerm: user&#39;s first name or last name</li>
</ul></li>
</ul></li>
<li>order: one of the following self explanatory ENUMs

<ul>
<li>CREATED_AT_ASC</li>
<li>CREATED_AT_DESC</li>
<li>MODIFIED_AT_ASC</li>
<li>MODIFIED_AT_DESC</li>
<li>LAST_CHAT_TIME_ASC</li>
<li>LAST_CHAT_TIME_DESC</li>
<li>CAMPAIGN_NAME_ASC</li>
<li>CAMPAIGN_NAME_DESC</li>
</ul></li>
<li>before: ID for pagination. The result will only contain items before the id.</li>
<li>after: ID for pagination. The result will only contain items after the id.</li>
<li>first: int. The number of items from the beginning of the result.</li>
<li>last: int. The number of items from the end of the result.</li>
</ul>
<h3 id='query-with-the-parameters'>Query with the parameters.</h3>
<ul>
<li>Retrieving the conversations list for the specific campaign.
You can get the campaign id from the url.
https://www.alli.ai/campaigns/CAMPAIGN_ID</li>
</ul>

<p>For example, if you want to get the 3 conversations with the following conditions:
- the campaign id is Q2FtcGFpZ246NWI5MzBjNGRmOWNhY2MwMjI4MGQ5OWY3
- the user&#39;s name is Pocoyo</p>

<p>The query would look like</p>
<pre class="highlight plaintext"><code>query getConversations {
  conversations(filter: {searchTerm: "Pocoyo", campaignIds: ["Q2FtcGFpZ246NWI5MzBjNGRmOWNhY2MwMjI4MGQ5OWY3"]}, first: 3) {
    edges {
      node {
        id
        campaign {
          id
        }
        user {
          id
          firstName
          ownUserId
        }
        chats {
          edges {
            node {
              ... on UserChat {
                message
              }
              ... on AgentChat {
                message
                agent {
                  name
                }
              }
              ... on BotChat {
                message
                createdAt
                chatOptions
              }
              __typename
            }
          }
        }
      }
    }
  }
}

</code></pre>
<p><img src="/images/query_with_params.png" alt="Query with params" /></p>
<h2 id='agent-api-with-python-example'>Agent API with Python Example</h2>
<p>You can get api lists and arguments, fields using graphiql tool. Please see graphiql&#39;s Document section.
<img src="/images/graphiql_document.png" alt="Graphiql document" /></p>
<h3 id='full-example'>Full example</h3>
<ul>
<li>Please see example https://github.com/allganize/documents/blob/master/alli_api/agent_api_example.py</li>
</ul>
<h3 id='login'>Login</h3>
<p>You can get authorization token using signin mutation.
And you can use agent permission apis using this token by sending AUTHORIZATION http header.</p>

<p><strong>Example</strong></p>
<pre class="highlight plaintext"><code>gql = """
mutation signin($email:String!, $passwd:String!) {
  login(email:$email, password:$passwd) {
    token
  }
}
"""
variables = {
  "email": "",
  "passwd": ""
}

token = execute_gql(GRAPHQL_ENDPOINT, gql, variables=variables)['login']['token']
auth_headers = {
  'AUTHORIZATION': token
}
</code></pre><h3 id='get-campaigns'>Get Campaigns</h3>
<p>You can get campaign lists using campaigns query.</p>

<p><strong>Get Campaigns Example</strong></p>

<p>Please see graphql relay spec. https://facebook.github.io/relay/graphql/connections.htm</p>
<pre class="highlight plaintext"><code>gql = """
query getCampaigns($filter:CampaignFilter) {
  campaigns(filter:$filter) {
    edges {
      node {
        id
        name
      }
    }
  }
}
"""
variables = {
}

campaigns = execute_gql(GRAPHQL_ENDPOINT, gql, variables=variables, headers=auth_headers)['campaigns']['edges']
for campaign in campaigns:
  id = campaign['node']['id']
  name = campaign['node']['name']
  print(f"{id}, {name}")

</code></pre><h3 id='get-conversations'>Get Conversations</h3>
<p>You can get campaign lists using campaigns query.</p>

<p><strong>Note</strong>  Conversation list is very long. So please set first or last parameter. </p>

<p>Please see graphql relay spec. https://facebook.github.io/relay/graphql/connections.htm</p>

<p><strong>Get Conversations Example</strong></p>
<pre class="highlight plaintext"><code>gql = """
query getConversations($filter:ConversationFilterInput, $limit:Int) {
  conversations(filter:$filter, first:$limit) {
    edges {
      node {
        id
        user {
          ownUserId
        }
        chats {
          edges {
            node {
              ... on UserChat {
                message
              }
              ... on AgentChat {
                message
                agent {
                  name
                }
              }
              ... on BotChat {
                message
                createdAt
                chatOptions
              }
              __typename
            }
          }
        }
      }
    }
  }
}
"""
variables = {
  "limit": 10  # Please add limit. see
}
conversations = execute_gql(GRAPHQL_ENDPOINT, gql,
              variables=variables,
              headers=auth_headers)['conversations']['edges']
for conv in conversations:
  conv = conv['node']
  id = conv['id']
  user = conv['user']['ownUserId']
  print(f"ConvId({id}), User({user})")
  for chat in conv['chats']['edges']:
    typename, message, options = get_plain_text(chat['node'])
    print(f"\t{typename} : {message}, {options}")
</code></pre><h3 id='get-user-lists'>Get User lists</h3><pre class="highlight plaintext"><code>gql = """
query getUsers($filter:UserFilter, $limit:Int) {
  users(filter:$filter, first:$limit) {
    edges {
      node {
        ownUserId
        name
        online
        variables {
          edges {
            node {
              id
              name
            }
            value
            readOnly
          }
        }
      }
    }
  }
}
"""
# You can add UserFilter.
variables = {
  "limit": 10  # Please add limit. see
}
users = execute_gql(GRAPHQL_ENDPOINT, gql,
          variables=variables,
          headers=auth_headers)['users']['edges']
for user in users:
  user = user['node']
  id = user['ownUserId']
  name = user['name']
  print(f"Id({id}), Name({name})")
</code></pre>